====== Flashcard Spaced-Repetition System (SRS) Instruction Set ======

OVERALL GOAL
Build a Supabase-backed flashcard SRS for Levantine Arabic with:
• Basic two-sided cards (English ↔ Arabic + transliteration)
• Cloze deletions
• Image cards (static images front/back)
• JSON-with-named-slots templating
• SM-2 algorithm with 0–3 quality scale
• Free-form tags and single-level decks
• User-specific decks (multi-user via Supabase Auth + RLS)
• Key stats: streak, reviewsCount, qualityHistory, avgResponseTime

DRIVING WORKFLOW
• I will drive one sub-step at a time by saying e.g. “execute 1.1”
• If I’m unhappy, I’ll say “X is wrong” or “Y needs changing.”
• Otherwise you’ll move to the next sub-step (e.g. “execute 1.2”).

DATA MODEL
1.1 Card Types
• basic
• cloze
• image

1.2 Card Schema (JSON with named slots)
{
"id": "uuid",
"type": "basic|cloze|image",
"fields": {
"english": "…",
"arabic": "…",
"transliteration": "…",
"clozeText": "…", // only for cloze
"imageUrl": "…"
},
"layout": {
"question": "{{fields.english}} → {{fields.arabic}}",
"answer": "{{fields.arabic}} ({{fields.transliteration}})"
},
"media": {
"images": ["…"],
"audio": ["…"]
},
"tags": ["…"], // free-form
"metadata": {
"createdAt": "timestamp",
"updatedAt": "timestamp"
},
"reviewStatsId": "uuid"
}

1.3 Organization
• Decks: single-level list on “Flashcard Decks” screen
• Default decks + user-created decks
• “Daily words” section with button to add words into any deck
• Tags: free-form per card

SCHEDULING ENGINE
2.1 Base Algorithm: SM-2 (Anki)
2.2 Quality Scale: 0–3
0 = blackout
1 = wrong but familiar
2 = correct after hesitation
3 = perfect recall

2.3 Review Metadata Fields (in Reviews table):
• lastReviewDate (timestamp)
• nextReviewDate (timestamp)
• interval (days)
• easeFactor (float)
• repetitionCount (int)
• streak (int)
• reviewsCount (int)
• qualityHistory ([0–3])
• avgResponseTime (ms)

2.4 Lapses: follow SM-2 default
(on quality < threshold reset interval, reduce easeFactor)

PERSISTENCE & SYNC
3.1 Supabase Schema
– users (auth)
– decks (id, userId, name, createdAt)
– cards (id, deckId, …fields from 1.2…)
– reviews (id, cardId, …fields from 2.3…)
– tags (id, cardId, name)

3.2 API Access
• Use Supabase client directly in app with RLS
• JWT auth via Supabase Auth

3.3 Offline: omit for MVP
3.4 Conflict Resolution: last-write-wins

REVIEW-SESSION UI
4.1 CardView component: front/back, quality buttons (0–3)
4.2 Flow: fetch due cards → show one → record answer → repeat
4.3 Controls: next, previous, shuffle, session-length selector

ALGORITHM ↔ UI INTEGRATION
5.1 Hook quality button → call intervalCalc(old, ease, quality)
5.2 Persist Review record → update Card.nextReviewDate

SETTINGS & CUSTOMISATION
6.1 Settings page: select decks, session length, filters
6.2 Algorithm parameters: initialInterval, defaultEaseFactor

ANALYTICS & REPORTING
7.1 Track metrics: totalReviews, retentionRate, avgEase
7.2 Charts: interval distribution, retention curve
7.3 Export: CSV reports

IMPORT/EXPORT & EXTENSIONS
8.1 Anki-style import/export (APKG or JSON/CSV)
8.2 NotebookLM/Google Sheets sync integration
8.3 Plugin system scaffold

TESTING & DEPLOYMENT
9.1 Unit tests: scheduling logic, API routes
9.2 E2E tests: full review session
9.3 CI/CD: staging & production deploy

====